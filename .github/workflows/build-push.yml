name: Build && Push

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  push:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          # Extract branch name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          # set output variable accessible in the action
          echo ::set-output name=branch::${BRANCH_NAME}

      # For debugging capture the selected branch
      - name: Extracted branch
        run: echo "Extracted branch ${{ steps.extract_branch.outputs.branch }}"

      # Avoid build and push only for 'master' branch because for 'master' we have another action that builds release image
      - name: Build and push
        if: steps.extract_branch.outputs.branch != 'master'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: BUILD_VERSION=${{ github.sha }}
          push: true
          tags: dmsc/duo-backend:${{ steps.extract_branch.outputs.branch }}

      - name: Trigger pipeline
        run: |
          REPOSITORY=${{ github.repository }}
          RESULT=$(curl -X POST \
            -F token="${{ secrets.GITLAB_TRIGGER_TOKEN }}" \
            -F ref=master \
            -F "variables[RUN_DEPLOY]=1" \
            -F "variables[BRANCH]=${{ steps.extract_branch.outputs.branch }}" \
            -F "variables[REPOSITORY]=${REPOSITORY#UserOfficeProject/}" \
            -o /dev/null \
            --silent \
            --write-out '%{http_code}' \
            ${{ secrets.GITLAB_TRIGGER_URL }})

          if [[ $RESULT != "201" ]]; then
            echo "Failed to trigger Gitlab pipeline: $RESULT"
            exit 1
          fi

      - name: Trigger Jenkins
        run: | 
          curl -k -l -u ${{ secrets.STFC_CI_TRIGGER_USERNAME }}:${{ secrets.STFC_CI_TRIGGER_TOKEN }} "${{ secrets.STFC_CI_TRIGGER_BASE_URL }}/Dev_Deploy_ProposalBackend.LatestImage/build?token=${{ secrets.STFC_CI_TRIGGER_URL_TOKEN }}"