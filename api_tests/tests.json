{
  "info": {
    "_postman_id": "d2853a25-19e2-43de-bbc6-21686ddb5038",
    "name": "Monitoring a collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "createUser [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should be able to create user\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createUser.user.id).to.be.above(0);",
              "});",
              "",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_USER_ID\", jsonData.data.createUser.user.id);",
              "pm.environment.set(\"NEW_USER_EMAIL\", jsonData.data.createUser.user.email);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "77f5be8a-bd02-41c5-b75f-a426f637266b",
            "exec": [""],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin",
            "type": "text"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000",
            "type": "text"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br",
            "type": "text"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
            "type": "text"
          },
          {
            "key": "Connection",
            "value": "keep-alive",
            "type": "text"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation (\n    $orcid: String!, \n    $email: String!, \n    $password: String!,\n    $firstname: String!,\n    $lastname: String!,\n    $position: String!,\n    $phone: String!,\n    $nationality: Int!\n) {\n  createUser(\n    user_title: \"Ms.\"\n    firstname: $firstname\n    preferredname: $firstname\n    lastname: $lastname\n    password: $password\n    orcid: $orcid\n    orcidHash: \"\"\n    refreshToken: \"\"\n    gender: \"female\"\n    nationality: $nationality\n    birthdate: \"2000-01-01\"\n    organisation: 7\n    department: \"QA\"\n    position: $position\n    email: $email\n    telephone: $phone\n    )\n    {\n        user\n        {\n          id\n          email\n        }\n    }\n}",
            "variables": "{\n\t\"orcid\":\"{{$randomUUID}}\",\n\t\"email\":\"{{$randomEmail}}\",\n\t\"password\":\"{{USER_PASSWORD}}\",\n\t\"firstname\":\"{{$randomFirstName}}\",\n\t\"lastname\":\"{{$randomLastName}}\",\n\t\"position\":\"{{$randomJobTitle}}\",\n\t\"phone\":\"{{$randomPhoneNumber}}\",\n\t\"nationality\":9\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"],
          "query": [
            {
              "key": "",
              "value": "",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "users [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ad64f991-52bc-4f0e-9910-29a02216aec8",
            "exec": [
              "pm.test(\"Should be able to fetch users\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.users.totalCount).to.be.above(0)",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ($filter: String!, $first: Int!, $offset: Int!, $subtractUsers:[Int], $userRole:UserRole) {\n  users(filter: $filter, first: $first, offset: $offset, subtractUsers:$subtractUsers, userRole:$userRole) {\n    users {\n      firstname\n      lastname\n      organisation\n      id\n    }\n    totalCount\n  }\n}\n",
            "variables": "{\n    \"filter\": \"\",\n    \"offset\": 0,\n    \"first\": 5,\n    \"subtractUsers\":[],\n    \"userRole\":\"USER\"\n  }"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "login [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "fd5ff0d9-2288-40da-ac78-e2942958780c",
            "exec": [
              "pm.test(\"Should be able to log in\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.login.token).not.eql(null)",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_USER_TOKEN\", jsonData.data.login.token);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    token\n    error\n  }\n}\n",
            "variables": "{\n    \"email\": \"{{NEW_USER_EMAIL}}\",\n    \"password\":\"{{USER_PASSWORD}}\"\n  }"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "token [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "aa6257ef-b799-4e64-8cb2-5b3b83c329ff",
            "exec": [
              "pm.test(\"Should be able to renew token\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.token.error).to.eql(null)",
              "    pm.expect(jsonData.data.token.token).to.not.eql(null)",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_USER_TOKEN\", jsonData.data.token.token);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDEwMDc5NywiZXhwIjoxNTcwNzA1NTk3fQ.VGrhlvv4eA8RqnHVEPLWRlFegdsG1IXygWJPoeJGCXA"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission/11"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($token: String!) {\n  token(token:$token) {\n    token\n    error\n  }\n}\n\n",
            "variables": "{\n\t\"token\": \"{{NEW_USER_TOKEN}}\"\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "obtainTokenForUser [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "aa6257ef-b799-4e64-8cb2-5b3b83c329ff",
            "exec": [
              "pm.test(\"Should be able to renew token\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.token.error).to.eql(null)",
              "    pm.expect(jsonData.data.token.token).to.not.eql(null)",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_USER_TOKEN\", jsonData.data.token.token);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDEwMDc5NywiZXhwIjoxNTcwNzA1NTk3fQ.VGrhlvv4eA8RqnHVEPLWRlFegdsG1IXygWJPoeJGCXA"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission/11"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($token: String!) {\n  token(token:$token) {\n    token\n    error\n  }\n}\n\n",
            "variables": "{\n\t\"token\": \"{{NEW_USER_TOKEN}}\"\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updateUser [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should be able to update user\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updateUser.error).to.equal(null);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "cfd5d278-bf9a-481e-8198-c43b6b59b01d",
            "exec": [""],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($newUserID:Int!, $position:String, $firstname:String, $lastname:String) {\n  updateUser(id:$newUserID, position:$position, firstname:$firstname, lastname:$lastname)\n    {\n      user {\n        position\n      }\n      error\n    }\n}\n",
            "variables": "{\n\t\"newUserID\":{{NEW_USER_ID}},\n\t\"position\":\"{{NEW_USER_POSITION}}\",\n\t \"firstname\":\"{{$randomFirstName}}\",\n\t\"lastname\":\"{{$randomLastName}}\"\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updatePassword [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should be able to update password\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updatePassword.user.id).to.equal(pm.environment.get(\"NEW_USER_ID\"));",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "cfd5d278-bf9a-481e-8198-c43b6b59b01d",
            "exec": [""],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($id:Int!, $password:String!) {\n  updatePassword(id:$id, password:$password)\n    {\n      user {\n        id\n      }\n      error\n    }\n}\n\n",
            "variables": "{\n\t\"id\":{{NEW_USER_ID}},\n\t\"password\":\"{{$randomPassword}}\"\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createSep [Mutations]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "7982d7e9-f944-4300-a0ff-9107ea514a60",
            "exec": [
              "pm.test(\"Can create proposal template\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createSEP.error).to.be.eql(null)",
              "    pm.expect(jsonData.data.createSEP.sep.id).to.be.above(0)",
              "    pm.environment.set(\"NEW_SEP_ID\", jsonData.data.createSEP.sep.id);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($code: String!, $active: Boolean!, $description: String!) {\n  createSEP(code:$code, active:$active, description:$description) {\n    sep {\n      id\n    }\n    error\n  }\n}",
            "variables": "{\n        \"code\": \"{{$randomWord}}\",\n        \"active\": true,\n        \"description\": \"{{$randomWord}}\"\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createTemplate [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Can create proposal template\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createTemplate.error).to.be.eql(null)",
              "    pm.expect(jsonData.data.createTemplate.template.templateId).to.be.above(0)",
              "    pm.environment.set(\"NEW_TEMPLATE_ID\", jsonData.data.createTemplate.template.templateId);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation  ($categoryId: TemplateCategoryId!, $name: String!, $description: String) {\n  createTemplate(categoryId: $categoryId, name:$name, description:$description) {\n    template {\n      templateId\n      name\n    }\n    error\n  }\n}",
            "variables": "{\n        \"categoryId\": \"PROPOSAL_QUESTIONARY\",\n        \"name\": \"{{$randomWord}}\",\n        \"description\": \"{{$randomWord}}\"\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "getTemplates [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "8fec1b22-295b-491f-bd6b-c0c08ec4de96",
            "exec": [
              "pm.test(\"Can create proposal template\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.templates.find(template => template.templateId === pm.environment.get(\"NEW_TEMPLATE_ID\"))).to.not.eql(undefined)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query {\n  templates(filter:{isArchived:false}) {\n\ttemplateId\n  }\n}",
            "variables": ""
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createCall [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should create call\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createCall.call.id).to.be.above(0);",
              "});",
              "",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_CALL_ID\", jsonData.data.createCall.call.id);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($shortCode: String!, $startDate: DateTime!, $endDate: DateTime!, $comment: String!, $templateId: Int) {\n  createCall (createCallInput:{\n    shortCode:$shortCode\n    startCall: $startDate\n    endCall: $endDate\n    startReview: $startDate\n    endReview: $endDate\n    startNotify: $startDate\n    endNotify: $endDate\n    startCycle: $startDate\n    endCycle: $endDate\n    cycleComment: $comment\n    surveyComment: \"Test\"\n    templateId: $templateId\n  }\n  )\n  {\n    call {\n      id\n      shortCode\n      startCall\n    }\n    error\n  }\n}",
            "variables": "{\n\t\"shortCode\":\"{{$randomLoremWord}}\",\n\t\"startDate\":\"2010-01-01\",\n\t\"endDate\":\"2030-01-01\",\n\t\"comment\":\"{{$randomPhrase}}\",\n\t\"templateId\": {{NEW_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createTopic [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Can create topic\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createTopic.error).to.be.eql(null)",
              "    pm.environment.set(\"NEW_TOPIC_ID\", jsonData.data.createTopic.template.steps[0].topic.id);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($templateId: Int!) {\n  createTopic(templateId: $templateId, sortOrder: 0) {\n    template {\n      steps {\n        topic {\n          title\n          id\n        }\n      }\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"templateId\": {{NEW_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updateTopic [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should update topic\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updateTopic.error).to.eql(null)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($topicId: Int!, $templateId: Int, $title: String, $sortOrder: Int, $isEnabled: Boolean) {\n  updateTopic(id: $topicId, templateId: $templateId, title: $title, sortOrder: $sortOrder, isEnabled: $isEnabled) {\n    template {\n      name\n    }\n    error\n  }\n}\n",
            "variables": "{\n        \"title\": \"{{$randomWord}}\",\n        \"topicId\": {{NEW_TOPIC_ID}}\n,\n  \"templateId\": {{NEW_TEMPLATE_ID}}\n, \n  \"sortOrder\": {{NEW_TOPIC_SORT_ORDER}}\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createQuestion [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ad64f991-52bc-4f0e-9910-29a02216aec8",
            "exec": [
              "pm.test(\"Create field should not resut in failure\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createQuestion.error).to.be.eql(null);",
              "});",
              "",
              "pm.test(\"Create field should not resut in failure\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createQuestion.question.dataType).to.be.eql(\"FILE_UPLOAD\");",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_FIELD_ID\", jsonData.data.createQuestion.question.proposalQuestionId);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAyVDEyOjMyOjM4LjEyMloiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wMlQxMjozMjozOC4xMjJaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDAyMzY0NiwiZXhwIjoxNTcwNjI4NDQ2fQ.tz1DuEHe-9Clb0seTqQ7MJMmPeoWk3M4fRIcrP8x8CQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($categoryId: TemplateCategoryId!, $dataType: DataType!) {\n  createQuestion(categoryId: $categoryId, dataType: $dataType) {\n    question {\n          proposalQuestionId\n          dataType\n          question\n          config\n          {\n              ... on TextInputConfig {\n                required\n              }\n          }\n          \n\n    }\n    error\n  }\n}",
            "variables": "{\n        \"categoryId\": \"PROPOSAL_QUESTIONARY\",\n        \"dataType\": \"FILE_UPLOAD\",\n        \"fieldConfigFragment\":\"__typename\"\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updateQuestion [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ad64f991-52bc-4f0e-9910-29a02216aec8",
            "exec": [
              "pm.test(\"Create field should not resut in failure\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updateQuestion).to.not.eql(null);",
              "    pm.expect(jsonData.data.updateQuestion.error).to.eql(null);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAyVDEyOjMyOjM4LjEyMloiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wMlQxMjozMjozOC4xMjJaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDAyMzY0NiwiZXhwIjoxNTcwNjI4NDQ2fQ.tz1DuEHe-9Clb0seTqQ7MJMmPeoWk3M4fRIcrP8x8CQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($id:String!, $question:String, $config:String) {\n  updateQuestion(id:$id, question:$question, config:$config) {\n    question {\n        question\n        proposalQuestionId\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"id\": \"{{NEW_FIELD_ID}}\",\n\"question\": \"{{$randomWords}}\",\n\"config\": \"{\\\"required\\\":true}\",\n\"isEnabled\": true,\n\"dependencies\": []\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createQuestionTemplateRelation [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "66e20853-b707-429c-9e45-7569cb731311",
            "exec": [
              "pm.test(\"Create field should not resut in failure\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createQuestionTemplateRelation.template).to.not.eql(null);",
              "    pm.expect(jsonData.data.createQuestionTemplateRelation.error).to.eql(null);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAyVDEyOjMyOjM4LjEyMloiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wMlQxMjozMjozOC4xMjJaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDAyMzY0NiwiZXhwIjoxNTcwNjI4NDQ2fQ.tz1DuEHe-9Clb0seTqQ7MJMmPeoWk3M4fRIcrP8x8CQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($templateId: Int!, $questionId: String!, $topicId: Int!) {\n  createQuestionTemplateRelation(templateId:$templateId, questionId:$questionId, sortOrder:0, topicId:$topicId) {\n\ttemplate {\n\t\tname\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"questionId\": \"{{NEW_FIELD_ID}}\",\n\t\"topicId\": {{NEW_TOPIC_ID}},\n\"templateId\": {{NEW_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updateQuestionTemplateRelation [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ad64f991-52bc-4f0e-9910-29a02216aec8",
            "exec": [
              "pm.test(\"Create field should not resut in failure\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updateQuestionTemplateRelation.template).to.not.eql(null);",
              "    pm.expect(jsonData.data.updateQuestionTemplateRelation.error).to.eql(null);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAyVDEyOjMyOjM4LjEyMloiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wMlQxMjozMjozOC4xMjJaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDAyMzY0NiwiZXhwIjoxNTcwNjI4NDQ2fQ.tz1DuEHe-9Clb0seTqQ7MJMmPeoWk3M4fRIcrP8x8CQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($questionId: String!, $templateId: Int!, $topicId: Int!, $sortOrder: Int!) {\n  updateQuestionTemplateRelation(questionId: $questionId, templateId: $templateId, topicId: $topicId, sortOrder: $sortOrder) {\n    template {\n      steps {\n        topic {\n          title\n          id\n        }\n        fields {\n          question {\n            proposalQuestionId\n            dataType\n            question\n            config {\n              ... on TextInputConfig {\n                required\n              }\n            }\n          }\n          dependency {\n            questionId\n            dependencyId\n            dependencyNaturalKey\n            condition {\n              condition\n              params\n            }\n          }\n        }\n      }\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"questionId\": \"{{NEW_FIELD_ID}}\",\n\"question\": \"{{$randomWords}}\",\n\"config\": \"{\\\"required\\\":true}\",\n\"topicId\": {{NEW_TOPIC_ID}},\n\"sortOrder\": 0,\n\"templateId\": {{NEW_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "blankQuestionarySteps",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "fd5ff0d9-2288-40da-ac78-e2942958780c",
            "exec": [
              "pm.test(\"Should create proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.blankQuestionarySteps.fields).not.eq(null)",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDA5ODAyNCwiZXhwIjoxNTcwNzAyODI0fQ.tQKzxyg8_i_Z4b2ny6-naoT3JqaFnJN_Z-MvU1ta31s"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query($templateId:Int!) {\nblankQuestionarySteps(templateId:$templateId) {\n\n      fields {\n          question {\n            proposalQuestionId\n              dataType\n              question\n \n          }\n        \n        value\n        dependency {\n          questionId\n            dependencyId\n            dependencyNaturalKey\n            condition {\n                  condition\n                  params\n            }\n        }\n      }\n}\n}",
            "variables": "{\n\t\"templateId\": {{NEW_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createProposal [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "fd5ff0d9-2288-40da-ac78-e2942958780c",
            "exec": [
              "pm.test(\"Should create proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createProposal.proposal.id).to.be.above(0)",
              "    pm.environment.set(\"NEW_PROPOSAL_ID\", jsonData.data.createProposal.proposal.id);",
              "    pm.environment.set(\"NEW_QUESTIONARY_ID\", jsonData.data.createProposal.proposal.questionaryId);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDA5ODAyNCwiZXhwIjoxNTcwNzAyODI0fQ.tQKzxyg8_i_Z4b2ny6-naoT3JqaFnJN_Z-MvU1ta31s"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($callId: Int!) {\n  createProposal(callId: $callId) {\n    proposal {\n      id\n      status\n      {\n        name\n      }\n      questionaryId\n      questionary {\n        steps {\n          topic {\n            title\n            id\n          }\n          fields {\n            question {\n              proposalQuestionId\n              dataType\n              question\n            }\n            value\n            dependency {\n              questionId\n              dependencyId\n              dependencyNaturalKey\n              condition {\n                condition\n                params\n              }\n            }\n          }\n        }\n      }\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"callId\": {{NEW_CALL_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createTemplate(Sample) [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "46b5ed37-8234-4ff6-bca1-6d2e24bc55fd",
            "exec": [
              "pm.test(\"Should create proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createTemplate.template.templateId).to.be.above(0)",
              "    pm.environment.set(\"NEW_SAMPLE_TEMPLATE_ID\", jsonData.data.createTemplate.template.templateId);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDA5ODAyNCwiZXhwIjoxNTcwNzAyODI0fQ.tQKzxyg8_i_Z4b2ny6-naoT3JqaFnJN_Z-MvU1ta31s"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation {\n  createTemplate(\n    categoryId: SAMPLE_DECLARATION\n    name: \"Sample title\"\n    description: \"Sample description\"\n  ) {\n    template {\n      templateId\n    }\n    error\n  }\n}",
            "variables": ""
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createSample [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "51d71beb-8245-468a-8c73-e3f83ae9d02c",
            "exec": [
              "pm.test(\"Should create proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createSample.sample.id).to.be.above(0)",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDA5ODAyNCwiZXhwIjoxNTcwNzAyODI0fQ.tQKzxyg8_i_Z4b2ny6-naoT3JqaFnJN_Z-MvU1ta31s"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($newSampleTemplateId:Int!) {\n  createSample(title:\"My sample\", templateId:$newSampleTemplateId) {\n    sample {\n      id\n      title\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"newSampleTemplateId\": {{NEW_SAMPLE_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "createAnswerQuestionaryRelation [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "054235a9-5abd-4ce0-8ced-4c1d9cfdc599",
            "exec": [
              "pm.test(\"Should create proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.createSample.sample.id).to.be.above(0)",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDA5ODAyNCwiZXhwIjoxNTcwNzAyODI0fQ.tQKzxyg8_i_Z4b2ny6-naoT3JqaFnJN_Z-MvU1ta31s"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($newSampleTemplateId:Int!) {\n  createSample(title:\"My sample\", templateId:$newSampleTemplateId) {\n    sample {\n      id\n      title\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"newSampleTemplateId\": {{NEW_SAMPLE_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "proposal [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "f344edc4-6752-4680-9d8f-92b6739cdaaa",
            "exec": [
              "pm.test(\"Should get proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.proposal.id).to.eql(pm.environment.get(\"NEW_PROPOSAL_ID\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission/2"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ($id: Int!) {\n  proposal(id: $id) {\n    id\n    title\n    abstract\n    status\n    {\n      name\n    }\n    users {\n      firstname\n      lastname\n      id\n    }\n    questionary {\n      steps {\n        topic {\n          title\n          id\n        }\n        fields {\n          question {\n            proposalQuestionId\n            dataType\n            question\n            config {\n              ... on TextInputConfig {\n                required\n              }\n            }\n          }\n          value\n          dependency {\n            questionId\n            dependencyId\n            dependencyNaturalKey\n            condition {\n              condition\n              params\n            }\n          }\n        }\n      }\n    }\n    reviews {\n      id\n      comment\n      status\n      reviewer {\n        firstname\n        lastname\n        id\n      }\n    }\n  }\n}\n",
            "variables": "{\n\t\"id\":{{NEW_PROPOSAL_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updateProposal [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "aa6257ef-b799-4e64-8cb2-5b3b83c329ff",
            "exec": [
              "pm.test(\"Should update proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updateProposal.proposal.id).to.eql(pm.environment.get(\"NEW_PROPOSAL_ID\"))",
              "    pm.expect(jsonData.data.updateProposal.proposal.title).to.eql(pm.environment.get(\"NEW_PROPOSAL_TITLE\"))",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDEwMDc5NywiZXhwIjoxNTcwNzA1NTk3fQ.VGrhlvv4eA8RqnHVEPLWRlFegdsG1IXygWJPoeJGCXA"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission/11"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($id: Int!, $title: String, $abstract: String, $users: [Int!]) {\n      updateProposal(id: $id, title: $title, abstract: $abstract, users: $users) {\n    proposal {\n      id\n      title\n      abstract\n    }\n    error\n  }\n}\n",
            "variables": "{\n        \"id\": {{NEW_PROPOSAL_ID}},\n        \"title\": \"{{NEW_PROPOSAL_TITLE}}\",\n        \"abstract\": \"{{NEW_PROPOSAL_ABSTRACT}}\"\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "answerTopic [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "eadbfaf3-8c24-47e6-ac19-001ec33b516a",
            "exec": [
              "pm.test(\"Should update proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.answerTopic.error).to.eql(null);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDEwMDc5NywiZXhwIjoxNTcwNzA1NTk3fQ.VGrhlvv4eA8RqnHVEPLWRlFegdsG1IXygWJPoeJGCXA"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission/11"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($questionaryId: Int!, $topicId:Int!, $answers: [AnswerInput!]!) {\n  answerTopic(questionaryId:$questionaryId, topicId: $topicId,  answers:$answers) {\n    questionaryStep{\n         fields {\n          question {\n            question\n          }\n        }\n    }\n    error\n  }\n}",
            "variables": "{\n        \"questionaryId\": {{NEW_QUESTIONARY_ID}},\n        \"topicId\": {{NEW_TOPIC_ID}},\n        \"answers\": [{\"questionId\": \"{{NEW_FIELD_ID}}\", \"value\":\"{\\\"value\\\":\\\"val\\\"}\"}]\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "updateAnswer [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "aa6257ef-b799-4e64-8cb2-5b3b83c329ff",
            "exec": [
              "pm.test(\"Should update proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.updateAnswer.error).to.eql(null);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDEwMDc5NywiZXhwIjoxNTcwNzA1NTk3fQ.VGrhlvv4eA8RqnHVEPLWRlFegdsG1IXygWJPoeJGCXA"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission/11"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($questionaryId: Int!, $answer: AnswerInput!) {\n    updateAnswer(questionaryId:$questionaryId, answer:$answer) {\n        questionId\n        error\n    }\n}\n",
            "variables": "{\n        \"questionaryId\": {{NEW_QUESTIONARY_ID}},\n        \"answer\": {\"questionId\": \"{{NEW_FIELD_ID}}\", \"value\":\"{\\\"value\\\":\\\"val\\\"}\"}\n    }"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "submitProposal [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should submit proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.submitProposal.proposal.id).to.equal(pm.environment.get(\"NEW_PROPOSAL_ID\"));",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors",
            "type": "text"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin",
            "type": "text"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000",
            "type": "text"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br",
            "type": "text"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Accept",
            "value": "*/*",
            "type": "text"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36",
            "type": "text"
          },
          {
            "key": "Connection",
            "value": "keep-alive",
            "type": "text"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($proposalId: Int!) {\n  submitProposal(id:$proposalId) {\n    proposal {\n      id\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"proposalId\":{{NEW_PROPOSAL_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"],
          "query": [
            {
              "key": "",
              "value": "",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "call [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should get call\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.call.id).to.eql(pm.environment.get(\"NEW_CALL_ID\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query($callID: Int!) {\n  call(id:$callID)\n    {\n      id\n    }\n}\n",
            "variables": "{\n\t\"callID\":{{NEW_CALL_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "addUserRole [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should add user role\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.addUserRole.success).to.equal(true);",
              "    pm.expect(jsonData.data.addUserRole.error).to.equal(null);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($newUserId:Int!) {\n  addUserRole(userID: $newUserId, roleID: 2) {\n      success\n      error\n  }\n}\n",
            "variables": "{\n\t\"newUserId\":{{NEW_USER_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "addUserForReview [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should add user for review\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.addUserForReview.review.id).to.be.above(0);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_REVIEW_ID\", jsonData.data.addUserForReview.review.id);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($newUserId:Int!, $newProposalId:Int!, $newSepId:Int!) {\n  addUserForReview(userID: $newUserId, sepID: $newSepId, proposalID: $newProposalId) {\n    review {\n      id\n\t}\n    error\n  }\n}\n",
            "variables": "{\n\t\"newUserId\":{{NEW_USER_ID}},\n\t\"newProposalId\":{{NEW_PROPOSAL_ID}},\n\t\"newSepId\":{{NEW_SEP_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "addReview [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should add review\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.addReview.review.id).to.equal(pm.environment.get(\"NEW_REVIEW_ID\"));",
              "    pm.expect(jsonData.data.addReview.error).to.equal(null);",
              "    pm.expect(jsonData.data.addReview.review.comment).to.equal(\"Test comment\");",
              "    pm.expect(jsonData.data.addReview.review.grade).to.equal(9);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($reviewID: Int!, $sepID: Int!) {\n  addReview(reviewID: $reviewID, comment:\"Test comment\", grade:9, status:DRAFT, sepID: $sepID) {\n    review {\n        id,\n        comment,\n        grade,\n    }\n    error\n  }\n}\n",
            "variables": "{\n\t\"reviewID\":{{NEW_REVIEW_ID}},\n\t\"sepID\": {{NEW_SEP_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "review [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should get review\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.review.id).to.eql(pm.environment.get(\"NEW_REVIEW_ID\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query($reviewID: Int!) {\n  review(id:$reviewID)\n    {\n      id\n    }\n}\n",
            "variables": "{\n\t\"reviewID\":{{NEW_REVIEW_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "removeUserForReview [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "391254b8-d41b-412a-ab59-2b5911b4d2fc",
            "exec": [
              "pm.test(\"Should remove user from review\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.removeUserForReview.review.id).to.be.above(0);",
              "    pm.expect(jsonData.data.removeUserForReview.error).to.equal(null);",
              "});",
              "",
              "var jsonData = pm.response.json();",
              "pm.environment.set(\"NEW_REVIEW_ID\", jsonData.data.removeUserForReview.review.id);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "type": "text",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "type": "text",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "type": "text",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "type": "text",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "type": "text",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "type": "text",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "type": "text",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Connection",
            "type": "text",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($newReviewID:Int!) {\n  removeUserForReview(reviewID: $newReviewID) {\n      review {\n          id\n      }\n      error\n  }\n}\n",
            "variables": "{\n\t\"newReviewID\":{{NEW_REVIEW_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "getPageContent [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should get page content\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.getPageContent).to.not.be.eql(null)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query {\n  getPageContent(id:HELPPAGE)\n}\n",
            "variables": ""
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "setPageContent [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should set page content\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.setPageContent.page.content).to.not.be.eql(null)",
              "    pm.expect(jsonData.data.setPageContent.error).to.be.eql(null)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($content: String!) {\n  setPageContent(id:HELPPAGE, text:$content)\n    {\n      page{\n        content\n      }\n      error\n    }\n}\n",
            "variables": "{\n\t\"content\":\"{{$randomLoremSentences}}\"\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "proposals [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should get proposals\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.proposals.totalCount).to.be.above(0);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query {\n  proposals {\n    proposals{\n      id\n      shortCode\n      title\n      status {\n        name\n      }\n      }\n    totalCount\n    }\n  }",
            "variables": "{\n    \"filter\": \"\"\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "proposals2 [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a12a3960-a667-472a-8f8e-21c4090bc0bd",
            "exec": [
              "pm.test(\"Should get proposals\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.proposals.totalCount).to.be.above(0);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query($questionaryIds: [Int!]) {\n  proposals(filter:{questionaryIds:$questionaryIds}) {\n    proposals{\n      id\n      shortCode\n      title\n      status {\n        name\n      }\n      }\n    totalCount\n    }\n  }",
            "variables": "{\n    \"questionaryIds\": [{{NEW_QUESTIONARY_ID}}]\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "basicUserDetails [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should get basic user details\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.basicUserDetails.id).to.equal(pm.environment.get(\"NEW_USER_ID\"));",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ($id:Int!) {\n  basicUserDetails(id:$id)\n    {\n      id\n      lastname\n      firstname\n    }\n}\n",
            "variables": "{\n\t\"id\":{{NEW_USER_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "checkEmailExist [Query]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should check email exists\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.checkEmailExist).to.equal(true);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{NEW_USER_TOKEN}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "query ($email:String!) {\n  checkEmailExist(email:$email)\n}\n",
            "variables": "{\n\t\"email\":\"{{NEW_USER_EMAIL}}\"\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "deleteProposal [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "fd5ff0d9-2288-40da-ac78-e2942958780c",
            "exec": [
              "pm.test(\"Should delete proposal\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.deleteProposal.error).to.equal(null)",
              "    pm.expect(jsonData.data.deleteProposal.proposal.id).to.be.equal(pm.environment.get(\"NEW_PROPOSAL_ID\"))",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoxLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQ2FybCIsIm1pZGRsZW5hbWUiOiJDaHJpc3RpYW4iLCJsYXN0bmFtZSI6IkNhcmxzc29uIiwidXNlcm5hbWUiOiJ0ZXN0dXNlciIsInByZWZlcnJlZG5hbWUiOm51bGwsIm9yY2lkIjoiNTgxNDU5NjA0IiwiZ2VuZGVyIjoibWFsZSIsIm5hdGlvbmFsaXR5IjoiTm9yd2VnaWFuIiwiYmlydGhkYXRlIjoiMjAwMC0wNC0wMVQyMjowMDowMC4wMDBaIiwib3JnYW5pc2F0aW9uIjoiUm9iZXJ0cywgUmVpbGx5IGFuZCBHdXRrb3dza2kiLCJkZXBhcnRtZW50IjoiSVQgZGVwYXJtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJFc3RvbmlhLCBOZXcgR2FicmllbGxhLCA0MDU2IENyb25pbiBNb3RvcndheSIsInBvc2l0aW9uIjoiU3RyYXRlZ2lzdCIsImVtYWlsIjoiSmF2b240QGhvdG1haWwuY29tIiwidGVsZXBob25lIjoiKDI4OCkgNDMxLTE0NDMiLCJ0ZWxlcGhvbmVfYWx0IjoiKDM3MCkgMzg2LTg5NzYiLCJjcmVhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MTdaIiwidXBkYXRlZCI6IjIwMTktMTAtMDNUMDg6MjQ6NTYuNTE3WiJ9LCJyb2xlcyI6W3siaWQiOjEsInNob3J0Q29kZSI6InVzZXIiLCJ0aXRsZSI6IlVzZXIifV0sImlhdCI6MTU3MDA5ODAyNCwiZXhwIjoxNTcwNzAyODI0fQ.tQKzxyg8_i_Z4b2ny6-naoT3JqaFnJN_Z-MvU1ta31s"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/ProposalSubmission"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($id:Int!) {\n  deleteProposal(id:$id){\n    proposal{\n      id\n    }\n    error\n  }\n}",
            "variables": "{\n\t\"id\":{{NEW_PROPOSAL_ID}}\n}"
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "deleteQuestionTemplateRelation [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ad64f991-52bc-4f0e-9910-29a02216aec8",
            "exec": [
              "pm.test(\"Update delete template field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.deleteQuestionTemplateRelation.error).to.be.eql(null);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "2b244f5a-25f3-45a6-8f9b-49b34014cadf",
            "exec": ["console.log(\"Authorization\")"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAyVDEyOjMyOjM4LjEyMloiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wMlQxMjozMjozOC4xMjJaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDAyMzY0NiwiZXhwIjoxNTcwNjI4NDQ2fQ.tz1DuEHe-9Clb0seTqQ7MJMmPeoWk3M4fRIcrP8x8CQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($questionId: String!, $templateId: Int!) {\n  deleteQuestionTemplateRelation(questionId: $questionId, templateId: $templateId) {\n    template {\n      steps {\n        topic {\n          title\n          id\n        }\n        fields {\n          question {\n            proposalQuestionId\n            dataType\n            question\n            config {\n              ... on TextInputConfig {\n                required\n              }\n            }\n          }\n        }\n      }\n    }\n    error\n  }\n}\n",
            "variables": "{\n        \"questionId\": \"{{NEW_FIELD_ID}}\",\n        \"templateId\": {{NEW_TEMPLATE_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "deleteQuestion [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "ad64f991-52bc-4f0e-9910-29a02216aec8",
            "exec": [
              "pm.test(\"Update delete template field\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.deleteQuestion.error).to.be.eql(null);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "2b244f5a-25f3-45a6-8f9b-49b34014cadf",
            "exec": ["console.log(\"Authorization\")"],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Sec-Fetch-Site",
            "value": "same-origin"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br"
          },
          {
            "key": "Accept-Language",
            "value": "en-GB,en-US;q=0.9,en;q=0.8"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAyVDEyOjMyOjM4LjEyMloiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wMlQxMjozMjozOC4xMjJaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDAyMzY0NiwiZXhwIjoxNTcwNjI4NDQ2fQ.tz1DuEHe-9Clb0seTqQ7MJMmPeoWk3M4fRIcrP8x8CQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "*/*"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation ($id: String!) {\n  deleteQuestion(questionId: $id) {\n    question {\n      question\n    }\n    error\n  }\n}\n",
            "variables": "{\n        \"id\": \"{{NEW_FIELD_ID}}\"\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    },
    {
      "name": "deleteTopic [Mutation]",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "a213c77c-316a-48cc-a311-6ec12816927c",
            "exec": [
              "pm.test(\"Should delete topic\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.data.deleteTopic.error).to.be.eql(null)",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{Authorization}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Sec-Fetch-Mode",
            "value": "cors"
          },
          {
            "key": "Referer",
            "value": "http://localhost:3000/QuestionaryEditor"
          },
          {
            "key": "Origin",
            "value": "http://localhost:3000"
          },
          {
            "key": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"
          },
          {
            "key": "authorization",
            "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoyLCJ1c2VyX3RpdGxlIjoiTXIuIiwiZmlyc3RuYW1lIjoiQW5kZXJzIiwibWlkZGxlbmFtZSI6IkFkYW0iLCJsYXN0bmFtZSI6IkFuZGVyc3NvbiIsInVzZXJuYW1lIjoidGVzdG9mZmljZXIiLCJwcmVmZXJyZWRuYW1lIjoiUmhpYW5ub24iLCJvcmNpZCI6Ijg3ODMyMTg5NyIsImdlbmRlciI6Im1hbGUiLCJuYXRpb25hbGl0eSI6IkZyZW5jaCIsImJpcnRoZGF0ZSI6IjE5ODEtMDgtMDRUMjI6MDA6MDAuMDAwWiIsIm9yZ2FuaXNhdGlvbiI6IlBmYW5uZXJzdGlsbCBhbmQgU29ucyIsImRlcGFydG1lbnQiOiJJVCBkZXBhcnRtZW50Iiwib3JnYW5pc2F0aW9uX2FkZHJlc3MiOiJDb25nbywgQWxsZW5ldmlsbGUsIDM1ODIzIE11ZWxsZXIgR2xlbnMiLCJwb3NpdGlvbiI6IkxpYWlzb24iLCJlbWFpbCI6IkFhcm9uX0hhcnJpczQ5QGdtYWlsLmNvbSIsInRlbGVwaG9uZSI6IjcxMS0zMTYtNTcyOCIsInRlbGVwaG9uZV9hbHQiOiIxLTM1OS04NjQtMzQ4OSB4NzM5MCIsImNyZWF0ZWQiOiIyMDE5LTEwLTAzVDA4OjI0OjU2LjUyMFoiLCJ1cGRhdGVkIjoiMjAxOS0xMC0wM1QwODoyNDo1Ni41MjBaIn0sInJvbGVzIjpbeyJpZCI6Miwic2hvcnRDb2RlIjoidXNlcl9vZmZpY2VyIiwidGl0bGUiOiJVc2VyIE9mZmljZXIifV0sImlhdCI6MTU3MDEwMzkyMiwiZXhwIjoxNTcwNzA4NzIyfQ.VELbODuxgIO7cK7zkdEWLhNZD1EI1PyKopqCiYHonUQ"
          },
          {
            "key": "Content-Type",
            "name": "Content-Type",
            "type": "text",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "graphql",
          "graphql": {
            "query": "mutation($id: Int!) {\n    deleteTopic(topicId: $id){\n    error\n  }\n}",
            "variables": "{\n\t\"id\":{{NEW_TOPIC_ID}}\n}"
          },
          "options": {
            "graphql": {}
          }
        },
        "url": {
          "raw": "http://localhost:4000/graphql",
          "protocol": "http",
          "host": ["localhost"],
          "port": "4000",
          "path": ["graphql"]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "06d2bb9a-e55f-431e-b124-98ce9a7c4fd8",
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "99d9d036-7a45-484d-9164-35ba6cdd3c7c",
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "protocolProfileBehavior": {}
}
